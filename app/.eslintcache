[{"/home/lucas/git/mutilated-checkerboard/app/src/index.js":"1"},{"size":7879,"mtime":1609279295043,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"1j03snx","/home/lucas/git/mutilated-checkerboard/app/src/index.js",["7","8"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { DndProvider, useDrag, useDrop } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nimport './index.css';\nimport verticalDominoImg from './vertical-domino.png';\nimport horizontalDominoImg from './horizontal-domino.png';\nimport rotator from './rotator.png';\n\nconst ItemTypes = {\n  VERTICALDOMINO: 'verticalDominoType',\n  HORIZONTALDOMINO: 'horizontalDominoType',\n}\n\nfunction isEqual(obj1, obj2) {\n  return JSON.stringify(obj1) === JSON.stringify(obj2);\n}\n\nfunction Square(props) {\n  const [{ isOver, itemType }, verticalDrop] = useDrop({\n    accept: [ItemTypes.VERTICALDOMINO, ItemTypes.HORIZONTALDOMINO],\n    drop: ((item) => props.onDrop(item)),\n    collect: (monitor) => ({\n      isOver: !!monitor.isOver(),\n      itemType: monitor.getItemType()\n    })\n  })\n\n  let className = 'square';\n  if ((props.i+props.j) % 2 === 0) {\n    className += ' wh-square';\n  } else {\n    className += ' bl-square';\n  }\n\n  if ((props.i+props.j) % 14 === 0) {\n    className = 'ghost-square';\n  }\n\n  let child;\n  for (let domino of props.dominoes.vertical) {\n    if (isEqual(domino, [props.i, props.j])) {\n      child = <VerticalDomino\n                i={props.i}\n                j={props.j}\n                onDrag={props.onDrag}\n                removeDomino={(item) => props.removeDomino(item)}\n              />;\n      break;\n    }\n    if (isEqual(domino, [props.i-1, props.j])) {\n      className = 'ghost-square';\n      break;\n    }\n  }\n  for (let domino of props.dominoes.horizontal) {\n    if (isEqual(domino, [props.i, props.j])) {\n      child = <HorizontalDomino\n                i={props.i}\n                j={props.j}\n                onDrag={props.onDrag}\n                removeDomino={(item) => props.removeDomino(item)}\n              />;\n      break;\n    }\n    if (isEqual(domino, [props.i, props.j-1])) {\n      className = 'ghost-square';\n      break;\n    }\n  }\n\n  let highlight;\n  if (isOver) {\n    if (itemType === ItemTypes.VERTICALDOMINO) {\n      highlight = <div className='vertical-highlight' />\n    } else {\n      highlight = <div className='horizontal-highlight' />\n    }\n  }\n\n  return (\n    <div className={className} ref={verticalDrop}>\n      {highlight}\n      {child}\n    </div>\n  );\n}\n\nfunction Board(props) {\n  let squares = [];\n  for (let i = 0; i < 8; i++) {\n    for (let j = 0; j < 8; j++) {\n      squares.push(<Square key={i*8 + j}\n                           i={i}\n                           j={j}\n                           dominoes={props.dominoes}\n                           onDrop={(item) => props.addDomino(i, j, item)}\n                           removeDomino={(item)=>props.removeDomino(item.props.i, item.props.j)}\n                   />\n      );\n    }\n  }\n  return (\n    <div className='board-outline'>\n      {squares}\n    </div>\n  );\n}\n\nfunction Rotator(props) {\n  return (\n    <img\n      className='rotator' \n      src={rotator}\n      alt='rotator'\n      onClick={props.onClick}\n    />\n  );\n}\n\nfunction VerticalDomino(props) {\n  const [{ isDragging }, drag] = useDrag({\n    item: { \n      type: ItemTypes.VERTICALDOMINO,\n      props: props,\n    },\n    end: (item, monitor) => (props.removeDomino(item)),\n    collect: (monitor) => ({\n      isDragging: !!monitor.isDragging()\n    })\n  })\n\n  let className = 'vertical-domino';\n\n  return (\n    <div ref={drag}>\n      <img\n        className={className}\n        src={verticalDominoImg} \n        alt='vertical domino'\n      />\n    </div>\n  )\n}\n\nfunction HorizontalDomino(props) {\n  const [{ isDragging }, drag] = useDrag({\n    item: {\n      type: ItemTypes.HORIZONTALDOMINO,\n      props: props\n    },\n    end: (item, monitor) => (props.removeDomino(item)),\n    collect: (monitor) => ({\n      isDragging: !!monitor.isDragging()\n    })\n  })\n\n  let className = 'horizontal-domino';\n\n  return (\n  <div ref={drag}>\n    <img\n      className={className}\n      src={horizontalDominoImg} \n      alt='horizontal domino'\n    />\n  </div>\n  )\n}\n\nclass DominoReservoir extends React.Component {\n  constructor(props) {\n    super(props);\n    this.rotateDomino = this.rotateDomino.bind(this);\n    this.state = {\n      horizontal: false,\n    }\n  }\n\n  rotateDomino() {\n    this.setState({\n      horizontal: !this.state.horizontal,\n    });\n  }\n\n  render() {\n    let domino = this.state.horizontal ? <HorizontalDomino onDrag={()=>{}} removeDomino={()=>{}} /> : <VerticalDomino onDrag={()=>{}} removeDomino={()=>{}} />;\n    return (\n      <div>\n        <div className='domino-reservoir'>\n          <Rotator onClick={this.rotateDomino}/>\n          {domino}\n        </div>\n        <div>\n          <button onClick={this.props.onClick} className='clear-board' >\n            Clear board\n          </button>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass Notepad extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      value: 'Use this text input area to take notes as you try to solve the puzzle.'\n    };\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  render() {\n    return (\n      <textarea className='notepad' value={this.state.value} onChange={this.handleChange} />\n    )\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dominoes: {\n        vertical: [],\n        horizontal: [],\n      },\n    }\n  }\n\n  addDomino(i, j, item) {\n    let newDominoes = JSON.parse(JSON.stringify(this.state.dominoes));\n    if (item.type === ItemTypes.VERTICALDOMINO) {\n      newDominoes.vertical.push([i, j]);\n    } else {\n      newDominoes.horizontal.push([i, j]);\n    }\n    this.setState({\n      dominoes: newDominoes,\n    })\n  }\n\n  removeDomino(i, j) {\n    let newDominoes = JSON.parse(JSON.stringify(this.state.dominoes));\n    let totalVerticals = newDominoes.vertical.length;\n    for (let k = 0; k < totalVerticals; k++) {\n      if (newDominoes.vertical[k][0] === i && newDominoes.vertical[k][1] === j) {\n        newDominoes.vertical.splice(k, 1);\n        break;\n      }\n    }\n    let totalHorizontals = newDominoes.horizontal.length;\n    for (let k = 0; k < totalHorizontals; k++) {\n      if (newDominoes.horizontal[k][0] === i && newDominoes.horizontal[k][1] === j) {\n        newDominoes.horizontal.splice(k, 1);\n        break;\n      }\n    }\n    this.setState({\n      dominoes: newDominoes,\n    })\n  }\n\n  clearDominoes() {\n    this.setState({\n      dominoes: {\n        vertical: [],\n        horizontal: [],\n      },\n    })\n  }\n\n\n  render() {\n    return (\n      <DndProvider backend={HTML5Backend}>\n        <div style={{display: 'flex'}}>\n          <div>\n            <p className='explanation-p'>\n              Placeholder explanation:\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer iaculis felis a facilisis vehicula. Donec in cursus eros. Nunc sed sodales felis, sit amet viverra justo. Vestibulum ullamcorper odio in fermentum molestie. Donec accumsan leo est, et posuere enim finibus vel. Quisque a elit et sem lobortis aliquet non non urna. Donec scelerisque scelerisque orci pulvinar laoreet. Donec tempor nulla arcu, at ultricies erat pharetra elementum. Suspendisse et mauris rutrum, suscipit magna sed, auctor arcu. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse libero ipsum, interdum egestas nibh sed, viverra volutpat neque.\n            </p>\n            <DominoReservoir onClick={() => {this.clearDominoes()}} />\n          </div>\n          <Board\n            dominoes={this.state.dominoes}\n            addDomino={(i, j, item) => {this.addDomino(i, j, item)}}\n            removeDomino={(i, j)=>{this.removeDomino(i, j)}}\n          />\n          <Notepad />\n        </div>\n      </DndProvider>\n    )\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n",{"ruleId":"9","severity":1,"message":"10","line":123,"column":12,"nodeType":"11","messageId":"12","endLine":123,"endColumn":22},{"ruleId":"9","severity":1,"message":"10","line":148,"column":12,"nodeType":"11","messageId":"12","endLine":148,"endColumn":22},"no-unused-vars","'isDragging' is assigned a value but never used.","Identifier","unusedVar"]